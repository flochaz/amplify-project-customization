AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  GraphQLAPIId:
    Type: String
  env:
    Type: String
  DataSeeds:
    Description: The data  to ingest into DDB
    Type: String
    MinLength: 1
    MaxLength: 255

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:*
            Resource: 
            - "*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const https = require("https")
          const url = require("url")
          exports.handler = async function (event, context) {
            console.log(event)
            console.log(context)
            if (event.RequestType === 'Delete') {
              sendResponse(event, context, 'SUCCESS', { data:'data'})
            }
            try {
              const targetTable = event.ResourceProperties.TargetTable
              const dataSeeds = event.ResourceProperties.DataSeeds
              await writeDynamoData(dataSeeds, targetTable)
              await sendResponse(event, context, 'SUCCESS', { data:'data'})
            } catch(e) {
              console.log('Failed to write data', e)
              sendResponse(event, context, 'FAILED', { data:'data'})
            } finally {
              console.log('done I am')
            }            
          }
          async function writeDynamoData(dataSeeds, targetTable) {
            const ingestData = JSON.parse(dataSeeds)
            console.log("Ingesting data into " + targetTable + ":")
            const documentClient = new AWS.DynamoDB.DocumentClient();
            try {
              return Promise.all(ingestData.map(async (element) => {
                console.log(`element ${JSON.stringify(element)}`)
                await documentClient.put({
                  TableName:targetTable,
                  Item:{
                    ...element
                  }
                }).promise()
              }))
            } catch (e) {
              console.log('Error ingesting data:')
              console.log(e)
            }
          }
          async function sendResponse(event, context, responseStatus, responseData) {
              var responseBody = JSON.stringify({
                  Status:responseStatus,
                  Reason:"See the details in CloudWatch Log Stream:"+context.logStreamName,
                  PhysicalResourceId:context.logStreamName,
                  StackId:event.StackId,
                  RequestId:event.RequestId,
                  LogicalResourceId:event.LogicalResourceId,
                  Data:responseData
              })
              console.log("RESPONSE BODY:\n", responseBody)
              var parsedUrl = url.parse(event.ResponseURL)
              var options = {
                hostname:parsedUrl.hostname,
                port:443,
                path:parsedUrl.path,
                method:"PUT",
                headers:{
                  "content-type":"",
                  "content-length":responseBody.length
                }
              }
              console.log("SENDING RESPONSE...\n");
              return makeRequest(options, responseBody)
            }
            function makeRequest(options, body) {
              return new Promise((resolve, reject) => {
                const request = https.request(options, response => {
                  console.log("STATUS:" + response.statusCode)
                  console.log("HEADERS:" + JSON.stringify(response.headers))
                  resolve()
                })
                request.on("error", error => {
                  console.log("sendResponse Error:" + error)
                  reject()
                })
                request.write(body)
                request.end()
              })
            }
      Description: Lambda function that ingests data into a DynamoDB table.
      Handler: index.handler
      Role : 
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5

  DataIngestLambdaTrigger:
    Type: Custom::DataIngestLambdaTrigger
    Properties:
        ServiceToken: 
          Fn::Sub: 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}'
        TargetTable: 
          Fn::ImportValue: 
            Fn::Sub: '${GraphQLAPIId}:GetAtt:TodoTable:Name'
        DataSeeds: 
          Ref: DataSeeds
          
